#| label: Get a image with its annotations
# Choose an index (integer) between 1 and nrow(df_images).
idx <- 1
stopifnot(idx >= 1, idx <= nrow(df_images))
image_id <- df_images$image_id[idx]
image_id
img <- get_image_s3(image_id, thumbnail = FALSE)
#| label: Fetch image function
get_image_s3 <- function(image_id,
s3 = paws.storage::s3(),
bucket = "coral-reef-training",
thumbnail = FALSE) {
# Build the S3 key, matching the Python logic
key <- if (isTRUE(thumbnail)) sprintf("mermaid/%s_thumbnail.png", image_id)
else sprintf("mermaid/%s.png", image_id)
# Fetch the object as raw bytes
obj <- s3$get_object(Bucket = bucket, Key = key)
# Read into a magick image
magick::image_read(obj$Body)}
img <- get_image_s3(image_id, thumbnail = FALSE)
options("paws.log_level" = 3L)
img <- get_image_s3(image_id, thumbnail = FALSE)
annotations <- df_annotations %>%
filter(image_id == image_id)
# Quick peek
head(annotations)
img <- get_image_s3(image_id, thumbnail = FALSE)
#| label: Fetch image function
get_image <- function(image_id,
bucket = "coral-reef-training",
region = "us-east-1",
thumbnail = FALSE,
use_s3_fallback = TRUE) {
# 1) Try public HTTPS (works if the object is public)
key <- if (thumbnail) sprintf("mermaid/%s_thumbnail.png", image_id)
else           sprintf("mermaid/%s.png", image_id)
https_url <- sprintf("https://%s.s3.%s.amazonaws.com/%s", bucket, region, key)
img <- tryCatch(
magick::image_read(https_url),
error = function(e) NULL
)
if (!is.null(img)) return(img)
# 2) Optional fallback to paws.storage (needs AWS creds)
if (use_s3_fallback) {
if (!requireNamespace("paws.storage", quietly = TRUE)) {
stop("Public HTTPS failed and {paws.storage} is not installed for S3 fallback.")
}
s3 <- paws.storage::s3()
obj <- tryCatch(s3$get_object(Bucket = bucket, Key = key), error = function(e) NULL)
if (is.null(obj)) {
stop("Could not fetch image via HTTPS or S3. If the object isn’t public, configure AWS credentials.")
}
return(magick::image_read(obj$Body))
} else {
stop("Could not fetch image via HTTPS. If the object isn’t public, enable S3 fallback and configure AWS credentials.")
}
}
img <- get_image(image_id, thumbnail = FALSE)
img
shape_map <- c("o" = 16,
"^" = 17,
"s" = 15,
"D" = 18,
"X" = 4,
"P" = 8,
"*" = 8,
"+" = 3,
"x" = 4,
"v" = 25,
">" = 26,
"<" = 24)
annotations <- annotations %>%
mutate(# If growth form name is present use it; else fall back to marker codes as the label
growth_form_label = dplyr::coalesce(.data[["growth_form"]],
.data[["growth_form_name"]],
.data[["growth_form_marker"]]),
gf_shape = dplyr::recode(.data[["growth_form_marker"]],
!!!shape_map,
.default = 16))
colnames(annotations)
annotations <- annotations %>%
mutate(
growth_form_label = growth_form_name,
gf_shape = as.integer(factor(growth_form_name)) %% 25
# map to ggplot shapes 0–24
)
# If we have benthic categories, use them; else color by literal hex in benthic_color
use_named_benthic <- !is.null(benthic_pal) && length(benthic_pal) > 0
colnames(annotations)
annotations <- annotations %>%
mutate(growth_form_label = growth_form_name,
gf_shape = as.integer(factor(growth_form_name)) %% 25
# map to ggplot shapes 0–24
)
# Always start with NULL, then build a palette if the name column exists
benthic_pal <- NULL
use_named_benthic <- FALSE
if ("benthic_attribute_name" %in% names(annotations)) {
annotations <- annotations %>%
dplyr::mutate(benthic_attribute_name = as.character(benthic_attribute_name))
benthic_levels <- sort(unique(annotations$benthic_attribute_name))
# Color-blind friendly palette (viridis). If you prefer no extra dep, remove and let ggplot default.
if (!requireNamespace("viridisLite", quietly = TRUE)) {
install.packages("viridisLite")
}
benthic_pal <- stats::setNames(
viridisLite::viridis(length(benthic_levels)),
benthic_levels
)
use_named_benthic <- length(benthic_levels) > 0
}
p <- magick::image_ggplot(img) +
{
# Color by benthic category name if available; otherwise just plot points
if (use_named_benthic) {
ggplot2::geom_point(
data = annotations,
ggplot2::aes(x = col, y = row,
color = benthic_attribute_name,
shape = gf_shape),
size = 2.8, alpha = 0.85, stroke = 0.5
)
} else {
ggplot2::geom_point(
data = annotations,
ggplot2::aes(x = col, y = row,
shape = gf_shape),
size = 2.8, alpha = 0.85, stroke = 0.5
)
}
} +
ggplot2::scale_y_reverse() +
ggplot2::coord_fixed() +
ggplot2::theme_void()
if (use_named_benthic) {
p <- p + ggplot2::scale_color_manual(values = benthic_pal, name = "Benthic\nAttributes")
}
p <- p + ggplot2::scale_shape_discrete(name = "Growth\nForms")
p
annotations <- annotations %>%
mutate(benthic_attribute_name = as.character(benthic_attribute_name),
growth_form_name       = as.character(growth_form_name))
# Build a palette if benthic categories exist
benthic_pal <- NULL
if ("benthic_attribute_name" %in% names(annotations)) {
levs <- sort(unique(annotations$benthic_attribute_name))
if (!requireNamespace("viridisLite", quietly = TRUE)) install.packages("viridisLite")
benthic_pal <- setNames(viridisLite::viridis(length(levs)), levs)
}
# --- Plot image with points ---
p <- magick::image_ggplot(img) +
geom_point(
data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = factor(growth_form_name)),
size = 2.8, alpha = 0.85, stroke = 0.5
) +
scale_y_reverse() +   # so (0,0) is top-left like pixel coordinates
theme_void()
# Add benthic palette if built
if (!is.null(benthic_pal)) {
p <- p + scale_color_manual(values = benthic_pal, name = "Benthic\nAttributes")
}
# Add shape legend for growth forms
p <- p + scale_shape_discrete(name = "Growth\nForms")
p
head(annotations)
annotations <- df_annotations %>%
filter(image_id == image_id)
image_id
unique(df_annotations$image_id)
annotations <- df_annotations %>%
filter(image_id == image_id)
#If you already have an image id you can apply it instead of the following line:
image_id_iter <- df_images$image_id[idx]
image_id_iter
annotations <- df_annotations %>%
filter(image_id == image_id_iter)
annotations <- annotations %>%
mutate(benthic_attribute_name = as.character(benthic_attribute_name),
growth_form_name       = as.character(growth_form_name))
# Build a palette if benthic categories exist
benthic_pal <- NULL
if ("benthic_attribute_name" %in% names(annotations)) {
levs <- sort(unique(annotations$benthic_attribute_name))
if (!requireNamespace("viridisLite", quietly = TRUE)) install.packages("viridisLite")
benthic_pal <- setNames(viridisLite::viridis(length(levs)), levs)
}
# --- Plot image with points ---
p <- magick::image_ggplot(img) +
geom_point(
data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = factor(growth_form_name)),
size = 2.8, alpha = 0.85, stroke = 0.5
) +
scale_y_reverse() +   # so (0,0) is top-left like pixel coordinates
theme_void()
# Add benthic palette if built
if (!is.null(benthic_pal)) {
p <- p + scale_color_manual(values = benthic_pal, name = "Benthic\nAttributes")
}
# Add shape legend for growth forms
p <- p + scale_shape_discrete(name = "Growth\nForms")
p
magick::image_ggplot(img)
magick::image_ggplot(img) +
geom_point(
data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = factor(growth_form_name)),
size = 2.8, alpha = 0.85, stroke = 0.5
)
magick::image_ggplot(img) +
geom_point(
data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = factor(growth_form_name)),
size = 2.8, alpha = 0.85, stroke = 0.5
) +
scale_y_reverse()
magick::image_ggplot(img) +
geom_point(
data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = factor(growth_form_name)),
size = 2.8, alpha = 0.85, stroke = 0.5
)
# Get image dimensions
info <- magick::image_info(img)
W <- info$width
H <- info$height
# Clean & align coordinates
ann <- annotations %>%
dplyr::mutate(
col = as.numeric(col),
row = as.numeric(row),
# center on pixel; clamp to image bounds
x = pmin(pmax(col + 0.5, 0), W),
y = pmin(pmax(row + 0.5, 0), H),
benthic_attribute_name = as.character(benthic_attribute_name),
growth_form_name       = as.character(growth_form_name)
)
# Optional color-blind palette for benthic categories
benthic_pal <- NULL
if ("benthic_attribute_name" %in% names(ann) && any(!is.na(ann$benthic_attribute_name))) {
if (!requireNamespace("viridisLite", quietly = TRUE)) install.packages("viridisLite")
levs <- sort(unique(ann$benthic_attribute_name))
benthic_pal <- stats::setNames(viridisLite::viridis(length(levs)), levs)
}
# Plot: note the y flip via limits (top-left origin)
p <- magick::image_ggplot(img) +
ggplot2::geom_point(
data = ann,
ggplot2::aes(x = x, y = y,
color = benthic_attribute_name,
shape = factor(growth_form_name)),
size = 2.8, alpha = 0.85, stroke = 0.5
) +
ggplot2::scale_x_continuous(limits = c(0, W), expand = c(0, 0)) +
ggplot2::scale_y_reverse(limits = c(H, 0), expand = c(0, 0)) +
ggplot2::theme_void()
if (!is.null(benthic_pal)) {
p <- p + ggplot2::scale_color_manual(values = benthic_pal, name = "Benthic\nAttributes")
}
p <- p + ggplot2::scale_shape_discrete(name = "Growth\nForms")
p
magick::image_ggplot(img) +
ggplot2::geom_point(
data = ann,
ggplot2::aes(x = x, y = y,
color = benthic_attribute_name,
shape = factor(growth_form_name)),
size = 2.8, alpha = 0.85, stroke = 0.5
)
p
magick::image_ggplot(img) +
ggplot2::geom_point(
data = ann,
ggplot2::aes(x = x, y = y,
color = benthic_attribute_name,
shape = factor(growth_form_name)),
size = 2.8, alpha = 0.85, stroke = 0.5
)
annotations$row
W
annotations$col
H
#| label: Visualize image with its annotations
# --- tidy annotation fields & palette ---
ann <- annotations %>%
dplyr::mutate(
col = as.numeric(col),
row = as.numeric(row),
benthic_attribute_name = as.character(benthic_attribute_name),
growth_form_name       = as.character(growth_form_name)
)
# optional palette
benthic_pal <- NULL
if ("benthic_attribute_name" %in% names(ann) && any(!is.na(ann$benthic_attribute_name))) {
if (!requireNamespace("viridisLite", quietly = TRUE)) install.packages("viridisLite")
levs <- sort(unique(ann$benthic_attribute_name))
benthic_pal <- stats::setNames(viridisLite::viridis(length(levs)), levs)
}
# --- PLOT: let image_ggplot define coords; do NOT add coord_* or limits ---
p <- magick::image_ggplot(img) +
ggplot2::geom_point(
data = ann,
ggplot2::aes(x = col, y = row,
color = benthic_attribute_name,
shape = factor(growth_form_name)),
size = 2.8, alpha = 0.85, stroke = 0.5
) +
ggplot2::theme_void()
# legends
if (!is.null(benthic_pal)) {
p <- p + ggplot2::scale_color_manual(values = benthic_pal, name = "Benthic\nAttributes")
} else {
p <- p + ggplot2::guides(color = ggplot2::guide_legend(title = "Benthic\nAttributes"))
}
p <- p + ggplot2::scale_shape_discrete(name = "Growth\nForms")
p
magick::image_ggplot(img)
magick::image_ggplot(img) +
geom_point(x = 0.5, y = 0.5, color = "white")
magick::image_ggplot(img) +
geom_point(x = 10, y = 10, color = "white")
magick::image_ggplot(img) +
geom_point(x = 1000, y = 1000, color = "white", size = 2)
magick::image_ggplot(img) +
geom_point(x = 1000, y = 1000, color = "white", size = 3)
magick::image_ggplot(img) +
geom_point(x = 2000, y = 2000, color = "white", size = 3)
annotations
magick::image_ggplot(img) +
geom_point(data = annotations, aes(x = col, y = row), color = "white", size = 3)
magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_name)
)
magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_name),
size = 3)
magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_name),
size = 3)
magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_name))
magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row),
color = "white")
sum(is.na(annotations$growth_form_name))
sum(is.na(annotations$benthic_attribute_name))
annotations <- annotations %>%
mutate(growth_form_shape = ifelse(test = is.na(growth_form_name),
yes = "None",
no = growth_form_name))
p <- magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_shape),
size = 3, alpha = 0.85, stroke = 0.5) +
ggplot2::theme_void()
p
unique(df_annotations$growth_form_name)
magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_shape),
size = 3) +
ggplot2::theme_void()
p <- magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_shape),
size = 3) +
ggplot2::theme_void()
# legends
if (!is.null(benthic_pal)) {
p <- p + ggplot2::scale_color_manual(values = benthic_pal, name = "Benthic\nAttributes")
} else {
p <- p + ggplot2::guides(color = ggplot2::guide_legend(title = "Benthic\nAttributes"))
}
p <- p + ggplot2::scale_shape_discrete(name = "Growth\nForms")
p
p <- magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_shape),
size = 3) +
ggplot2::theme_void()
# legends
if (!is.null(benthic_pal)) {
p <- p +
ggplot2::scale_color_manual(values = benthic_pal, name = "Benthic\nAttributes")
} else {
p <- p +
ggplot2::guides(color = ggplot2::guide_legend(title = "Benthic\nAttributes"))
}
p <- p + ggplot2::scale_shape_discrete(name = "Growth\nForms")
p
magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_shape),
size = 3)
annotations <- annotations %>%
mutate(growth_form = ifelse(test = is.na(growth_form_name),
yes = "None",
no = growth_form_name))
# --- PLOT ---
p <- magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form_shape),
size = 3) +
ggplot2::theme_void()
p
annotations <- annotations %>%
mutate(growth_form = ifelse(test = is.na(growth_form_name),
yes = "None",
no = growth_form_name))
# --- PLOT ---
p <- magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form),
size = 3) +
ggplot2::theme_void()
p
annotations <- annotations %>%
mutate(growth_form = ifelse(test = is.na(growth_form_name),
yes = "None",
no = growth_form_name))
# --- PLOT ---
p <- magick::image_ggplot(img) +
geom_point(data = annotations,
aes(x = col, y = row,
color = benthic_attribute_name,
shape = growth_form),
size = 4) +
ggplot2::theme_void()
p
#| label: Set up environment - load packages
#| warning: false
rm(list = ls()) #remove past stored objects
options(scipen = 999) #turn off scientific notation
#install.packages(c("arrow", "dplyr", "ggplot2", "magick", "paws", "tidyr"))
library(arrow)
library(dplyr)
library(tidyr)
library(ggplot2)
library(magick)
#library(paws) #Only needed if using S3 bucket to retrieve image
#| label: Open MERMAID annotations file
annotations_path_s3 = "s3://coral-reef-training/mermaid/mermaid_confirmed_annotations.parquet" # Location of the annotations file (S3)
annotations_path_https = "https://coral-reef-training.s3.us-east-1.amazonaws.com/mermaid/mermaid_confirmed_annotations.parquet" # Location of the annotations file (https)
# Read the full annotations table (as S3 or https)
# Each row corresponds to one annotated point for an image (25 per image)
df_annotations_s3 <- arrow::read_parquet(annotations_path_s3)
df_annotations_https <- arrow::read_parquet(annotations_path_https)
# A per-image table (drop duplicate image rows)
df_images <- df_annotations_s3 %>%
distinct(image_id, region_id, region_name)
glue::glue("Loaded {nrow(df_annotations_s3)} annotations across {nrow(df_images)} images from {length(unique(df_images$region_id))} unique geographic realms.")
#| label: Open MERMAID annotations file
#annotations_path_s3 = "s3://coral-reef-training/mermaid/mermaid_confirmed_annotations.parquet" # Location of the annotations file (S3)
annotations_path_https = "https://coral-reef-training.s3.us-east-1.amazonaws.com/mermaid/mermaid_confirmed_annotations.parquet" # Location of the annotations file (https)
# Read the full annotations table (as S3 or https)
# Each row corresponds to one annotated point for an image (25 per image)
#df_annotations_s3 <- arrow::read_parquet(annotations_path_s3)
df_annotations_https <- arrow::read_parquet(annotations_path_https)
# A per-image table (drop duplicate image rows)
df_images <- df_annotations_https %>%
distinct(image_id, region_id, region_name)
glue::glue("Loaded {nrow(df_annotations_https)} annotations across {nrow(df_images)} images from {length(unique(df_images$region_id))} unique geographic realms.")
#| label: Open MERMAID annotations file
#annotations_path_s3 = "s3://coral-reef-training/mermaid/mermaid_confirmed_annotations.parquet" # Location of the annotations file (S3)
annotations_path_https = "https://coral-reef-training.s3.us-east-1.amazonaws.com/mermaid/mermaid_confirmed_annotations.parquet" # Location of the annotations file (https)
# Read the full annotations table (as S3 or https)
# Each row corresponds to one annotated point for an image (25 per image)
#df_annotations_s3 <- arrow::read_parquet(annotations_path_s3)
df_annotations_https <- arrow::read_parquet(annotations_path_https)
# A per-image table (drop duplicate image rows)
df_images <- df_annotations_https %>%
select(image_id, region_id, region_name) %>%
distinct()
glue::glue("Loaded {nrow(df_annotations_https)} annotations across {nrow(df_images)} images from {length(unique(df_images$region_id))} unique geographic realms.")
